// <auto-generated />
using System;
using BiketaBai.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BiketaBai.Migrations
{
    [DbContext(typeof(BiketaBaiDbContext))]
    [Migration("20251023152645_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BiketaBai.Models.AvailabilityStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId");

                    b.ToTable("availability_statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Available"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Rented"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Maintenance"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "Inactive"
                        });
                });

            modelBuilder.Entity("BiketaBai.Models.Bike", b =>
                {
                    b.Property<int>("BikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bike_id");

                    b.Property<int>("AvailabilityStatusId")
                        .HasColumnType("int")
                        .HasColumnName("availability_status_id");

                    b.Property<int>("BikeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("bike_type_id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("brand");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal>("DailyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("daily_rate");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("HourlyRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("hourly_rate");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("latitude");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("longitude");

                    b.Property<decimal>("Mileage")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("mileage");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("BikeId");

                    b.HasIndex("AvailabilityStatusId");

                    b.HasIndex("BikeTypeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("bikes");
                });

            modelBuilder.Entity("BiketaBai.Models.BikeImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    b.Property<int>("BikeId")
                        .HasColumnType("int")
                        .HasColumnName("bike_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_primary");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("uploaded_at");

                    b.HasKey("ImageId");

                    b.HasIndex("BikeId");

                    b.ToTable("bike_images");
                });

            modelBuilder.Entity("BiketaBai.Models.BikeType", b =>
                {
                    b.Property<int>("BikeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bike_type_id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type_name");

                    b.HasKey("BikeTypeId");

                    b.ToTable("bike_types");

                    b.HasData(
                        new
                        {
                            BikeTypeId = 1,
                            Description = "Off-road cycling",
                            TypeName = "Mountain Bike"
                        },
                        new
                        {
                            BikeTypeId = 2,
                            Description = "Paved road cycling",
                            TypeName = "Road Bike"
                        },
                        new
                        {
                            BikeTypeId = 3,
                            Description = "Versatile for various terrains",
                            TypeName = "Hybrid Bike"
                        },
                        new
                        {
                            BikeTypeId = 4,
                            Description = "E-bike with motor assistance",
                            TypeName = "Electric Bike"
                        },
                        new
                        {
                            BikeTypeId = 5,
                            Description = "Urban commuting",
                            TypeName = "City/Commuter Bike"
                        },
                        new
                        {
                            BikeTypeId = 6,
                            Description = "Tricks and stunts",
                            TypeName = "BMX"
                        },
                        new
                        {
                            BikeTypeId = 7,
                            Description = "Compact and portable",
                            TypeName = "Folding Bike"
                        });
                });

            modelBuilder.Entity("BiketaBai.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("actual_return_date");

                    b.Property<decimal>("BaseRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("base_rate");

                    b.Property<int>("BikeId")
                        .HasColumnType("int")
                        .HasColumnName("bike_id");

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("int")
                        .HasColumnName("booking_status_id");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("DistanceSavedKm")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("distance_saved_km");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<decimal>("RentalHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("rental_hours");

                    b.Property<int>("RenterId")
                        .HasColumnType("int")
                        .HasColumnName("renter_id");

                    b.Property<decimal>("ServiceFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("service_fee");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("BookingId");

                    b.HasIndex("BikeId");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("RenterId");

                    b.HasIndex("StartDate");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("BiketaBai.Models.BookingStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId");

                    b.ToTable("booking_statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Active"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Completed"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("BiketaBai.Models.CreditTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("BalanceAfter")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("balance_after");

                    b.Property<decimal>("BalanceBefore")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("balance_before");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reference_id");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_type_id");

                    b.Property<int>("WalletId")
                        .HasColumnType("int")
                        .HasColumnName("wallet_id");

                    b.HasKey("TransactionId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("WalletId");

                    b.ToTable("credit_transactions");
                });

            modelBuilder.Entity("BiketaBai.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("action_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("notification_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("BiketaBai.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("payment_date");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_status");

                    b.Property<decimal?>("RefundAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("refund_amount");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("refund_date");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("transaction_reference");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("BiketaBai.Models.PaymentMethod", b =>
                {
                    b.Property<int>("MethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("method_id");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("method_name");

                    b.HasKey("MethodId");

                    b.ToTable("payment_methods");

                    b.HasData(
                        new
                        {
                            MethodId = 1,
                            MethodName = "Wallet"
                        },
                        new
                        {
                            MethodId = 2,
                            MethodName = "GCash"
                        },
                        new
                        {
                            MethodId = 3,
                            MethodName = "QRPH"
                        },
                        new
                        {
                            MethodId = 4,
                            MethodName = "Cash"
                        });
                });

            modelBuilder.Entity("BiketaBai.Models.Points", b =>
                {
                    b.Property<int>("PointsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("points_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int")
                        .HasColumnName("total_points");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PointsId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("points");
                });

            modelBuilder.Entity("BiketaBai.Models.PointsHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("history_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("PointsAfter")
                        .HasColumnType("int")
                        .HasColumnName("points_after");

                    b.Property<int>("PointsBefore")
                        .HasColumnType("int")
                        .HasColumnName("points_before");

                    b.Property<int>("PointsChange")
                        .HasColumnType("int")
                        .HasColumnName("points_change");

                    b.Property<int>("PointsId")
                        .HasColumnType("int")
                        .HasColumnName("points_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reason");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("reference_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("PointsId");

                    b.ToTable("points_history");
                });

            modelBuilder.Entity("BiketaBai.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rating_id");

                    b.Property<int?>("BikeId")
                        .HasColumnType("int")
                        .HasColumnName("bike_id");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_flagged");

                    b.Property<bool>("IsRenterRatingOwner")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_renter_rating_owner");

                    b.Property<int>("RatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("rated_user_id");

                    b.Property<int>("RaterId")
                        .HasColumnType("int")
                        .HasColumnName("rater_id");

                    b.Property<string>("RatingCategory")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rating_category");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int")
                        .HasColumnName("rating_value");

                    b.Property<string>("Review")
                        .HasColumnType("text")
                        .HasColumnName("review");

                    b.HasKey("RatingId");

                    b.HasIndex("BikeId");

                    b.HasIndex("BookingId");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("RaterId");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("BiketaBai.Models.TransactionType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId");

                    b.ToTable("transaction_types");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            TypeName = "Load"
                        },
                        new
                        {
                            TypeId = 2,
                            TypeName = "Withdrawal"
                        },
                        new
                        {
                            TypeId = 3,
                            TypeName = "Rental Payment"
                        },
                        new
                        {
                            TypeId = 4,
                            TypeName = "Rental Earnings"
                        },
                        new
                        {
                            TypeId = 5,
                            TypeName = "Refund"
                        },
                        new
                        {
                            TypeId = 6,
                            TypeName = "Service Fee"
                        });
                });

            modelBuilder.Entity("BiketaBai.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_email_verified");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_owner");

                    b.Property<bool>("IsRenter")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_renter");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_suspended");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_photo_url");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("BiketaBai.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("wallet_id");

                    b.Property<decimal>("Balance")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("wallets");
                });

            modelBuilder.Entity("BiketaBai.Models.Bike", b =>
                {
                    b.HasOne("BiketaBai.Models.AvailabilityStatus", "AvailabilityStatus")
                        .WithMany("Bikes")
                        .HasForeignKey("AvailabilityStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiketaBai.Models.BikeType", "BikeType")
                        .WithMany("Bikes")
                        .HasForeignKey("BikeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiketaBai.Models.User", "Owner")
                        .WithMany("Bikes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityStatus");

                    b.Navigation("BikeType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BiketaBai.Models.BikeImage", b =>
                {
                    b.HasOne("BiketaBai.Models.Bike", "Bike")
                        .WithMany("BikeImages")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");
                });

            modelBuilder.Entity("BiketaBai.Models.Booking", b =>
                {
                    b.HasOne("BiketaBai.Models.Bike", "Bike")
                        .WithMany("Bookings")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiketaBai.Models.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiketaBai.Models.User", "Renter")
                        .WithMany("BookingsAsRenter")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("BookingStatus");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("BiketaBai.Models.CreditTransaction", b =>
                {
                    b.HasOne("BiketaBai.Models.TransactionType", "TransactionType")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiketaBai.Models.Wallet", "Wallet")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionType");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BiketaBai.Models.Notification", b =>
                {
                    b.HasOne("BiketaBai.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiketaBai.Models.Payment", b =>
                {
                    b.HasOne("BiketaBai.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiketaBai.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("BiketaBai.Models.Points", b =>
                {
                    b.HasOne("BiketaBai.Models.User", "User")
                        .WithOne("Points")
                        .HasForeignKey("BiketaBai.Models.Points", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiketaBai.Models.PointsHistory", b =>
                {
                    b.HasOne("BiketaBai.Models.Points", "Points")
                        .WithMany("PointsHistory")
                        .HasForeignKey("PointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Points");
                });

            modelBuilder.Entity("BiketaBai.Models.Rating", b =>
                {
                    b.HasOne("BiketaBai.Models.Bike", "Bike")
                        .WithMany("Ratings")
                        .HasForeignKey("BikeId");

                    b.HasOne("BiketaBai.Models.Booking", "Booking")
                        .WithMany("Ratings")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiketaBai.Models.User", "RatedUser")
                        .WithMany("RatingsReceived")
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BiketaBai.Models.User", "Rater")
                        .WithMany("RatingsGiven")
                        .HasForeignKey("RaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("Booking");

                    b.Navigation("RatedUser");

                    b.Navigation("Rater");
                });

            modelBuilder.Entity("BiketaBai.Models.Wallet", b =>
                {
                    b.HasOne("BiketaBai.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("BiketaBai.Models.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BiketaBai.Models.AvailabilityStatus", b =>
                {
                    b.Navigation("Bikes");
                });

            modelBuilder.Entity("BiketaBai.Models.Bike", b =>
                {
                    b.Navigation("BikeImages");

                    b.Navigation("Bookings");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("BiketaBai.Models.BikeType", b =>
                {
                    b.Navigation("Bikes");
                });

            modelBuilder.Entity("BiketaBai.Models.Booking", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("BiketaBai.Models.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BiketaBai.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BiketaBai.Models.Points", b =>
                {
                    b.Navigation("PointsHistory");
                });

            modelBuilder.Entity("BiketaBai.Models.TransactionType", b =>
                {
                    b.Navigation("CreditTransactions");
                });

            modelBuilder.Entity("BiketaBai.Models.User", b =>
                {
                    b.Navigation("Bikes");

                    b.Navigation("BookingsAsRenter");

                    b.Navigation("Notifications");

                    b.Navigation("Points");

                    b.Navigation("RatingsGiven");

                    b.Navigation("RatingsReceived");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BiketaBai.Models.Wallet", b =>
                {
                    b.Navigation("CreditTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
