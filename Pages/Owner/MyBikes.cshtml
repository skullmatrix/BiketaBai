@page
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@model MyBikesModel
@{
    ViewData["Title"] = "My Bikes";
}

<div class="container my-5">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="text-eco-green mb-1"><i class="bi bi-grid-3x3-gap"></i> Manage Listings</h2>
            <p class="text-muted mb-0">View, edit, and manage all your bike listings</p>
        </div>
        <a href="/Owner/AddBike" class="btn btn-success btn-lg">
            <i class="bi bi-plus-circle"></i> Add New Bike
        </a>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            <i class="bi bi-check-circle"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Summary Stats -->
    @if (Model.Bikes.Any())
    {
        <div class="row mb-4">
            <div class="col-md-3 mb-3">
                <div class="stats-badge bg-success">
                    <div class="stats-icon"><i class="bi bi-check-circle"></i></div>
                    <div class="stats-info">
                        <h4>@Model.Bikes.Count(b => b.AvailabilityStatusId == 1)</h4>
                        <p>Available</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="stats-badge bg-primary">
                    <div class="stats-icon"><i class="bi bi-bicycle"></i></div>
                    <div class="stats-info">
                        <h4>@Model.Bikes.Count(b => b.AvailabilityStatusId == 2)</h4>
                        <p>Currently Rented</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="stats-badge bg-warning">
                    <div class="stats-icon"><i class="bi bi-tools"></i></div>
                    <div class="stats-info">
                        <h4>@Model.Bikes.Count(b => b.AvailabilityStatusId == 3)</h4>
                        <p>Maintenance</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <div class="stats-badge bg-secondary">
                    <div class="stats-icon"><i class="bi bi-pause-circle"></i></div>
                    <div class="stats-info">
                        <h4>@Model.Bikes.Count(b => b.AvailabilityStatusId == 4)</h4>
                        <p>Inactive</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filter Options -->
        <div class="card mb-4 border-0 shadow-sm">
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label fw-bold">Filter by Status</label>
                        <select class="form-select" id="statusFilter">
                            <option value="all">All Bikes</option>
                            <option value="1">Available</option>
                            <option value="2">Rented</option>
                            <option value="3">Maintenance</option>
                            <option value="4">Inactive</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold">Search Bikes</label>
                        <input type="text" class="form-control" id="bikeSearch" placeholder="Search by brand or model...">
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold">Sort By</label>
                        <select class="form-select" id="sortBy">
                            <option value="recent">Recently Added</option>
                            <option value="name">Name (A-Z)</option>
                            <option value="price">Price (Low to High)</option>
                            <option value="rating">Rating (High to Low)</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row" id="bikesContainer">
        @if (Model.Bikes.Any())
        {
            @foreach (var bike in Model.Bikes)
            {
                <div class="col-md-6 col-lg-4 mb-4 bike-item" 
                     data-status="@bike.AvailabilityStatusId" 
                     data-name="@bike.Brand @bike.Model" 
                     data-price="@bike.HourlyRate"
                     data-rating="@(Model.BikeRatings.ContainsKey(bike.BikeId) ? Model.BikeRatings[bike.BikeId] : 0)">
                    <div class="card bike-listing-card h-100 shadow-sm border-0">
                        <!-- Status Badge Overlay -->
                        <div class="status-badge-overlay">
                            @switch (bike.AvailabilityStatusId)
                            {
                                case 1:
                                    <span class="badge bg-success"><i class="bi bi-check-circle"></i> Available</span>
                                    break;
                                case 2:
                                    <span class="badge bg-primary"><i class="bi bi-bicycle"></i> Rented</span>
                                    break;
                                case 3:
                                    <span class="badge bg-warning"><i class="bi bi-tools"></i> Maintenance</span>
                                    break;
                                case 4:
                                    <span class="badge bg-secondary"><i class="bi bi-pause-circle"></i> Inactive</span>
                                    break;
                            }
                        </div>

                        @if (bike.BikeImages.Any())
                        {
                            <img src="@bike.BikeImages.First(img => img.IsPrimary || bike.BikeImages.First() == img).ImageUrl" 
                                 class="card-img-top bike-listing-image" alt="@bike.Brand @bike.Model" />
                        }
                        else
                        {
                            <div class="placeholder-bike-image">
                                <i class="bi bi-bicycle" style="font-size: 4rem; color: #ccc;"></i>
                            </div>
                        }
                        
                        <div class="card-body d-flex flex-column">
                            <div class="mb-2">
                                <h5 class="card-title mb-1 fw-bold">@bike.Brand @bike.Model</h5>
                                <span class="badge bg-light text-dark border">@bike.BikeType.TypeName</span>
                            </div>
                            
                            <p class="text-muted mb-2 small">
                                <i class="bi bi-geo-alt-fill text-danger"></i> @bike.Location
                            </p>
                            
                            <div class="rating-stars mb-2">
                                @{
                                    var avgRating = Model.BikeRatings.ContainsKey(bike.BikeId) ? Model.BikeRatings[bike.BikeId] : 0;
                                    for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= avgRating)
                                        {
                                            <i class="bi bi-star-fill text-warning"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-star text-warning"></i>
                                        }
                                    }
                                }
                                <span class="text-muted small ms-1">(@avgRating.ToString("F1"))</span>
                            </div>
                            
                            <div class="pricing-info mb-2">
                                <span class="h5 text-success mb-0">₱@bike.HourlyRate</span><small class="text-muted">/hr</small>
                                <span class="text-muted mx-2">·</span>
                                <span class="fw-bold">₱@bike.DailyRate</span><small class="text-muted">/day</small>
                            </div>
                            
                            <div class="rental-info mb-3 p-2 bg-light rounded">
                                <small class="text-muted d-flex justify-content-between">
                                    <span><i class="bi bi-clock-history"></i> Active Rentals:</span>
                                    <strong class="text-primary">@Model.ActiveBookings.Count(b => b.BikeId == bike.BikeId)</strong>
                                </small>
                            </div>
                            
                            <div class="mt-auto">
                                <div class="d-grid gap-2">
                                    <a href="/Owner/EditBike/@bike.BikeId" class="btn btn-outline-success btn-sm">
                                        <i class="bi bi-pencil-square"></i> Edit Details
                                    </a>
                                    <div class="btn-group">
                                        <a href="/Bikes/Details/@bike.BikeId" class="btn btn-sm btn-outline-secondary">
                                            <i class="bi bi-eye"></i> View
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal@(bike.BikeId)">
                                            <i class="bi bi-trash3"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Delete Confirmation Modal -->
                <div class="modal fade" id="deleteModal@(bike.BikeId)" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Delete Bike</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                Are you sure you want to delete <strong>@bike.Brand @bike.Model</strong>?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <form method="post" asp-page-handler="Delete" asp-route-id="@bike.BikeId" class="d-inline">
                                    <button type="submit" class="btn btn-danger">Delete</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="bi bi-bicycle"></i>
                    </div>
                    <h3 class="empty-state-title">No Bikes Listed Yet</h3>
                    <p class="empty-state-message">Start earning passive income by listing your bikes for rent on our platform</p>
                    <a href="/Owner/AddBike" class="btn btn-success btn-lg">
                        <i class="bi bi-plus-circle"></i> Add Your First Bike
                    </a>
                    <div class="mt-4">
                        <small class="text-muted">
                            <i class="bi bi-info-circle"></i> List your bikes in minutes and start accepting rental requests
                        </small>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Filter and Search functionality
        document.addEventListener('DOMContentLoaded', function() {
            const statusFilter = document.getElementById('statusFilter');
            const bikeSearch = document.getElementById('bikeSearch');
            const sortBy = document.getElementById('sortBy');
            const bikesContainer = document.getElementById('bikesContainer');
            
            if (!statusFilter || !bikeSearch || !sortBy) return;
            
            function filterAndSortBikes() {
                const filterValue = statusFilter.value;
                const searchValue = bikeSearch.value.toLowerCase();
                const sortValue = sortBy.value;
                
                let bikeItems = Array.from(document.querySelectorAll('.bike-item'));
                
                // Filter bikes
                bikeItems.forEach(item => {
                    const status = item.dataset.status;
                    const name = item.dataset.name.toLowerCase();
                    
                    const statusMatch = filterValue === 'all' || status === filterValue;
                    const searchMatch = name.includes(searchValue);
                    
                    if (statusMatch && searchMatch) {
                        item.style.display = 'block';
                    } else {
                        item.style.display = 'none';
                    }
                });
                
                // Get visible bikes for sorting
                bikeItems = bikeItems.filter(item => item.style.display !== 'none');
                
                // Sort bikes
                bikeItems.sort((a, b) => {
                    switch(sortValue) {
                        case 'name':
                            return a.dataset.name.localeCompare(b.dataset.name);
                        case 'price':
                            return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
                        case 'rating':
                            return parseFloat(b.dataset.rating) - parseFloat(a.dataset.rating);
                        default: // recent
                            return 0; // Keep original order
                    }
                });
                
                // Reorder in DOM
                bikeItems.forEach(item => bikesContainer.appendChild(item));
            }
            
            // Event listeners
            statusFilter.addEventListener('change', filterAndSortBikes);
            bikeSearch.addEventListener('input', filterAndSortBikes);
            sortBy.addEventListener('change', filterAndSortBikes);
        });
    </script>
}

