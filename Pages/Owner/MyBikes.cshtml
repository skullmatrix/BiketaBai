@page
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@model MyBikesModel
@{
    ViewData["Title"] = "My Bikes";
}

<!-- Link Minimal CSS -->
<link rel="stylesheet" href="~/css/bikes-minimal.css" asp-append-version="true" />

<div class="mybikes-premium-container">
    <div class="container">
        <!-- Compact Header -->
        <div class="mybikes-header-premium">
            <div class="header-info">
                <h2>My Bikes</h2>
                <p>@Model.Bikes.Count listings</p>
            </div>
            <a href="/Owner/AddBike" class="btn-add-premium">
                <i class="bi bi-plus-lg"></i> Add Bike
            </a>
        </div>

        <!-- Alerts -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert-premium success" id="successAlert">
                <i class="bi bi-check-circle-fill"></i>
                <span>@TempData["SuccessMessage"]</span>
                <button type="button" class="alert-close" onclick="this.parentElement.remove()">×</button>
            </div>
        }
        
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert-premium error" id="errorAlert">
                <i class="bi bi-exclamation-triangle-fill"></i>
                <span>@TempData["ErrorMessage"]</span>
                <button type="button" class="alert-close" onclick="this.parentElement.remove()">×</button>
            </div>
        }

        @if (Model.Bikes.Any())
        {
            <!-- Compact Stats -->
            <div class="stats-bar-premium">
                <div class="stat-mini available">
                    <i class="bi bi-check-circle-fill"></i>
                    <span>@Model.Bikes.Count(b => b.AvailabilityStatusId == 1)</span>
                    <label>Available</label>
                </div>
                <div class="stat-mini rented">
                    <i class="bi bi-bicycle"></i>
                    <span>@Model.Bikes.Count(b => b.AvailabilityStatusId == 2)</span>
                    <label>Rented</label>
                </div>
                <div class="stat-mini maintenance">
                    <i class="bi bi-tools"></i>
                    <span>@Model.Bikes.Count(b => b.AvailabilityStatusId == 3)</span>
                    <label>Maintenance</label>
                </div>
                <div class="stat-mini inactive">
                    <i class="bi bi-pause-circle-fill"></i>
                    <span>@Model.Bikes.Count(b => b.AvailabilityStatusId == 4)</span>
                    <label>Inactive</label>
                </div>
            </div>

            <!-- Streamlined Filters -->
            <div class="filters-bar-premium">
                <div class="search-group-premium">
                    <i class="bi bi-search"></i>
                    <input type="text" id="searchInput" placeholder="Search bikes..." />
                </div>
                
                <select class="select-premium" id="statusFilter">
                    <option value="all">All Status</option>
                    <option value="1">Available</option>
                    <option value="2">Rented</option>
                    <option value="3">Maintenance</option>
                    <option value="4">Inactive</option>
                </select>
                
                <select class="select-premium" id="sortSelect">
                    <option value="recent">Recent</option>
                    <option value="name">Name</option>
                    <option value="price">Price</option>
                    <option value="rating">Rating</option>
                </select>
            </div>

            <!-- Compact Bikes Grid -->
            <div class="bikes-grid-premium" id="bikesGrid">
                @foreach (var bike in Model.Bikes)
                {
                    var avgRating = Model.BikeRatings.ContainsKey(bike.BikeId) ? Model.BikeRatings[bike.BikeId] : 0;
                    var statusClass = bike.AvailabilityStatusId switch { 1 => "available", 2 => "rented", 3 => "maintenance", 4 => "inactive", _ => "inactive" };
                    var statusText = bike.AvailabilityStatusId switch { 1 => "Available", 2 => "Rented", 3 => "Maintenance", 4 => "Inactive", _ => "Unknown" };
                    var activeRentals = Model.ActiveBookings.Count(b => b.BikeId == bike.BikeId);
                    var hasActiveBookings = activeRentals > 0;
                    
                    <div class="bike-card-premium" 
                         data-id="@bike.BikeId"
                         data-status="@bike.AvailabilityStatusId" 
                         data-name="@bike.Brand @bike.Model" 
                         data-price="@bike.HourlyRate"
                         data-rating="@avgRating">
                        
                        <!-- Compact Image -->
                        <div class="bike-img-premium">
                            @if (bike.BikeImages.Any())
                            {
                                <img src="@bike.BikeImages.First(img => img.IsPrimary || bike.BikeImages.First() == img).ImageUrl" alt="@bike.Brand @bike.Model" />
                            }
                            else
                            {
                                <div class="img-placeholder">
                                    <i class="bi bi-bicycle"></i>
                                </div>
                            }
                            <span class="status-badge-premium @statusClass">@statusText</span>
                        </div>
                        
                        <!-- Compact Content -->
                        <div class="bike-content-premium">
                            <div class="bike-title-row">
                                <h6>@bike.Brand @bike.Model</h6>
                                <span class="type-badge">@bike.BikeType.TypeName</span>
                            </div>
                            
                            <div class="bike-meta-row">
                                <div class="rating-compact">
                                    <i class="bi bi-star-fill"></i>
                                    <span>@avgRating.ToString("F1")</span>
                                </div>
                            </div>
                            
                            <div class="bike-price-row">
                                <div class="price-premium">
                                    <span class="hourly">₱@bike.HourlyRate<small>/hr</small></span>
                                    <span class="daily">₱@bike.DailyRate/day</span>
                                </div>
                                @if (activeRentals > 0)
                                {
                                    <div class="rental-badge">
                                        <i class="bi bi-clock-fill"></i> @activeRentals active
                                    </div>
                                }
                            </div>
                            
                            <!-- Compact Actions -->
                            <div class="bike-actions-premium">
                                <a href="/Owner/EditBike/@bike.BikeId" class="btn-action-premium edit">
                                    <i class="bi bi-pencil-fill"></i> Edit
                                </a>
                                <a href="/Bikes/Details/@bike.BikeId" class="btn-action-premium view">
                                    <i class="bi bi-eye-fill"></i> View
                                </a>
                                <button type="button" 
                                        class="btn-action-premium delete @(hasActiveBookings ? "disabled" : "")"
                                        @(hasActiveBookings ? "disabled" : "")
                                        @(hasActiveBookings ? "title='Cannot delete: Has active rentals'" : "")
                                        onclick="confirmDelete(@bike.BikeId, '@bike.Brand @bike.Model', @hasActiveBookings.ToString().ToLower())">
                                    <i class="bi bi-trash3-fill"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Compact Empty State -->
            <div class="empty-state-premium">
                <div class="empty-icon">
                    <i class="bi bi-bicycle"></i>
                </div>
                <h3>No Bikes Yet</h3>
                <p>Start earning by listing your bikes</p>
                <a href="/Owner/AddBike" class="btn-add-premium">
                    <i class="bi bi-plus-lg"></i> Add Your First Bike
                </a>
            </div>
        }
    </div>
</div>

<!-- Improved Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-premium">
            <div class="modal-header-premium">
                <div class="modal-icon-danger">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                </div>
                <h5>Delete Bike?</h5>
                <button type="button" class="btn-close-premium" data-bs-dismiss="modal">×</button>
            </div>
            <div class="modal-body-premium">
                <p id="deleteMessage"></p>
                <div class="warning-box" id="activeBookingWarning" style="display: none;">
                    <i class="bi bi-info-circle-fill"></i>
                    <span>This bike has active rentals and cannot be deleted.</span>
                </div>
            </div>
            <div class="modal-footer-premium">
                <button type="button" class="btn-modal-cancel" data-bs-dismiss="modal">Cancel</button>
                <form method="post" id="deleteForm" asp-page-handler="Delete" style="display: inline;">
                    <input type="hidden" name="id" id="deleteId" />
                    <button type="submit" class="btn-modal-danger" id="confirmDeleteBtn">
                        <i class="bi bi-trash3-fill"></i> Delete Bike
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            
            // Filter and Search
            function filterBikes() {
                const search = $('#searchInput').val().toLowerCase();
                const status = $('#statusFilter').val();
                const sort = $('#sortSelect').val();
                
                let bikes = $('.bike-card-premium').toArray();
                
                // Filter
                bikes.forEach(bike => {
                    const $bike = $(bike);
                    const name = $bike.data('name').toLowerCase();
                    const bikeStatus = $bike.data('status').toString();
                    
                    const matchSearch = name.includes(search);
                    const matchStatus = status === 'all' || bikeStatus === status;
                    
                    $bike.toggle(matchSearch && matchStatus);
                });
                
                // Sort visible bikes
                bikes = bikes.filter(b => $(b).is(':visible'));
                bikes.sort((a, b) => {
                    const $a = $(a), $b = $(b);
                    switch(sort) {
                        case 'name':
                            return $a.data('name').localeCompare($b.data('name'));
                        case 'price':
                            return $a.data('price') - $b.data('price');
                        case 'rating':
                            return $b.data('rating') - $a.data('rating');
                        default:
                            return 0;
                    }
                });
                
                bikes.forEach(bike => $('#bikesGrid').append(bike));
            }
            
            $('#searchInput, #statusFilter, #sortSelect').on('input change', filterBikes);
            
            // Auto-dismiss alerts
            setTimeout(() => {
                $('.alert-premium').fadeOut(300, function() { $(this).remove(); });
            }, 5000);
        });
        
        // Improved Delete Confirmation
        function confirmDelete(bikeId, bikeName, hasActive) {
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            
            $('#deleteId').val(bikeId);
            $('#deleteMessage').text(`Are you sure you want to delete "${bikeName}"? This action cannot be undone.`);
            
            if (hasActive) {
                $('#activeBookingWarning').show();
                $('#confirmDeleteBtn').prop('disabled', true).addClass('disabled');
            } else {
                $('#activeBookingWarning').hide();
                $('#confirmDeleteBtn').prop('disabled', false).removeClass('disabled');
            }
            
            deleteModal.show();
        }
        
        // Loading state on delete
        $('#deleteForm').submit(function() {
            $('#confirmDeleteBtn').html('<span class="spinner-border spinner-border-sm me-2"></span>Deleting...').prop('disabled', true);
        });
    </script>
}
