@page
@model ChangePasswordModel
@{
    ViewData["Title"] = "Change Password";
}

<link rel="stylesheet" href="~/css/premium-minimal.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/auth-minimal.css" asp-append-version="true" />

<style>
    /* MINIMAL styles - Only for wrapper layout, NOT for inputs */
    .password-wrapper {
        min-height: 100vh;
        background: linear-gradient(135deg, #f8faf7 0%, #ffffff 100%);
        padding: 2rem 1rem;
    }

    .password-content {
        max-width: 540px;
        margin: 0 auto;
    }

    .back-btn-premium {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        color: #6a6a6a;
        text-decoration: none;
        font-size: 0.875rem;
        font-weight: 500;
        margin-bottom: 1.5rem;
        transition: all 0.3s;
    }

    .back-btn-premium:hover {
        color: #87A96B;
        gap: 0.75rem;
    }
</style>

<div class="password-wrapper">
    <div class="password-content">
        <!-- Back Button -->
        <a href="/Account/Profile" class="back-btn-premium">
            <i class="bi bi-arrow-left"></i> Back to Profile
        </a>

        <!-- Main Card - Uses auth-minimal.css classes -->
        <div class="auth-card-minimal">
            <!-- Header -->
            <div class="auth-header-minimal">
                <div class="auth-logo-minimal">
                    <i class="bi bi-key"></i>
                </div>
                <h1>Change Password</h1>
                <p>Update your account password</p>
            </div>

            <!-- Alert Messages -->
            @if (!string.IsNullOrEmpty(Model.SuccessMessage))
            {
                <div class="auth-alert-minimal success">
                    <i class="bi bi-check-circle-fill"></i>
                    <div class="alert-content">
                        <strong>Success</strong>
                        <p>@Model.SuccessMessage</p>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="auth-alert-minimal error">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                    <div class="alert-content">
                        <strong>Error</strong>
                        <p>@Model.ErrorMessage</p>
                    </div>
                </div>
            }

            <!-- Form -->
            <form method="post">
                <!-- Current Password -->
                <div class="auth-form-group">
                    <label class="auth-form-label">
                        Current Password <span class="required">*</span>
                    </label>
                    <div class="auth-input-wrapper has-toggle">
                        <input asp-for="Input.CurrentPassword" type="password" class="auth-input" 
                               placeholder="Enter your current password" required id="currentPassword" />
                        <i class="bi bi-lock auth-input-icon"></i>
                        <button type="button" class="auth-password-toggle" id="toggleCurrentPassword">
                            <i class="bi bi-eye" id="toggleCurrentIcon"></i>
                        </button>
                    </div>
                    <span asp-validation-for="Input.CurrentPassword" class="validation-message error"></span>
                </div>

                <!-- New Password -->
                <div class="auth-form-group">
                    <label class="auth-form-label">
                        New Password <span class="required">*</span>
                    </label>
                    <div class="auth-input-wrapper has-toggle" id="newPasswordWrapper">
                        <input asp-for="Input.NewPassword" type="password" class="auth-input" 
                               placeholder="Create a strong password" required id="newPassword" minlength="8" />
                        <i class="bi bi-lock-fill auth-input-icon"></i>
                        <button type="button" class="auth-password-toggle" id="toggleNewPassword">
                            <i class="bi bi-eye" id="toggleNewIcon"></i>
                        </button>
                    </div>
                    
                    <!-- Password Strength Indicator -->
                    <div class="auth-password-strength" id="passwordStrength">
                        <div class="auth-strength-bar">
                            <div class="auth-strength-fill"></div>
                        </div>
                        <span class="auth-strength-text">Enter password</span>
                    </div>
                    
                    <!-- Password Hint -->
                    <div class="validation-message" id="passwordHint" style="display: block; color: #6a6a6a; font-size: 0.8125rem; margin-top: 0.5rem;">
                        <i class="bi bi-info-circle"></i>
                        <span id="passwordHintText">Use 8+ characters with uppercase, lowercase, and numbers</span>
                    </div>
                    <span asp-validation-for="Input.NewPassword" class="validation-message error"></span>
                </div>

                <!-- Confirm New Password -->
                <div class="auth-form-group">
                    <label class="auth-form-label">
                        Confirm New Password <span class="required">*</span>
                    </label>
                    <div class="auth-input-wrapper has-toggle" id="confirmPasswordWrapper">
                        <input asp-for="Input.ConfirmNewPassword" type="password" class="auth-input" 
                               placeholder="Re-enter new password" required id="confirmPassword" />
                        <i class="bi bi-lock-fill auth-input-icon"></i>
                        <button type="button" class="auth-password-toggle" id="toggleConfirmPassword">
                            <i class="bi bi-eye" id="toggleConfirmIcon"></i>
                        </button>
                        <i class="bi bi-x-circle validation-icon error"></i>
                        <i class="bi bi-check-circle validation-icon success"></i>
                    </div>
                    <div class="validation-message error" id="confirmPasswordError" style="display: none;">
                        <i class="bi bi-exclamation-circle-fill"></i>
                        <span>Passwords do not match</span>
                    </div>
                    <span asp-validation-for="Input.ConfirmNewPassword" class="validation-message error"></span>
                </div>

                <!-- Buttons -->
                <div class="auth-step-buttons">
                    <a href="/Account/Profile" class="auth-btn-minimal auth-btn-outline">
                        <i class="bi bi-x-circle"></i> Cancel
                    </a>
                    <button type="submit" class="auth-btn-minimal auth-btn-primary">
                        <i class="bi bi-check-circle"></i> Update Password
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Password Toggle - EXACT SAME as register page
        $('#toggleCurrentPassword, #toggleNewPassword, #toggleConfirmPassword').click(function(e) {
            e.preventDefault();
            const buttonId = $(this).attr('id');
            let passwordInput, toggleIcon;
            
            if (buttonId === 'toggleCurrentPassword') {
                passwordInput = $('#currentPassword');
                toggleIcon = $('#toggleCurrentIcon');
            } else if (buttonId === 'toggleNewPassword') {
                passwordInput = $('#newPassword');
                toggleIcon = $('#toggleNewIcon');
            } else {
                passwordInput = $('#confirmPassword');
                toggleIcon = $('#toggleConfirmIcon');
            }
            
            if (passwordInput.attr('type') === 'password') {
                passwordInput.attr('type', 'text');
                toggleIcon.removeClass('bi-eye').addClass('bi-eye-slash');
            } else {
                passwordInput.attr('type', 'password');
                toggleIcon.removeClass('bi-eye-slash').addClass('bi-eye');
            }
        });

        // Password Strength & Dynamic Hint - EXACT SAME as register page
        $('#newPassword').on('input', function() {
            const password = $(this).val();
            let strength = 0;
            let hint = '';
            
            // Check requirements
            const hasLength = password.length >= 8;
            const hasUppercase = password.match(/[A-Z]/);
            const hasLowercase = password.match(/[a-z]/);
            const hasNumber = password.match(/[0-9]/);
            
            // Dynamic hint suggestions
            if (password.length === 0) {
                hint = 'Use 8+ characters with uppercase, lowercase, and numbers';
            } else if (!hasLength) {
                hint = `Add ${8 - password.length} more character${8 - password.length > 1 ? 's' : ''}`;
            } else if (!hasUppercase) {
                hint = 'Add an uppercase letter (A-Z)';
            } else if (!hasLowercase) {
                hint = 'Add a lowercase letter (a-z)';
            } else if (!hasNumber) {
                hint = 'Add a number (0-9)';
            } else {
                hint = '✓ Password meets all requirements';
                $('#passwordHint').css('color', '#87A96B');
            }
            
            // Update hint text
            $('#passwordHintText').text(hint);
            if (hint.includes('✓')) {
                $('#passwordHint i').removeClass('bi-info-circle').addClass('bi-check-circle-fill');
            } else {
                $('#passwordHint i').removeClass('bi-check-circle-fill').addClass('bi-info-circle');
                $('#passwordHint').css('color', '#6a6a6a');
            }
            
            // Calculate strength
            if (password.length >= 8) strength++;
            if (password.match(/[a-z]/)) strength++;
            if (password.match(/[A-Z]/)) strength++;
            if (password.match(/[0-9]/)) strength++;
            if (password.match(/[^a-zA-Z0-9]/)) strength++;

            const strengthBar = $('.auth-strength-fill');
            const strengthText = $('.auth-strength-text');
            
            strengthBar.removeClass('weak medium strong');
            
            if (strength <= 2) {
                strengthBar.addClass('weak').css('width', '33%');
                strengthText.text('Weak password');
            } else if (strength === 3 || strength === 4) {
                strengthBar.addClass('medium').css('width', '66%');
                strengthText.text('Medium password');
            } else {
                strengthBar.addClass('strong').css('width', '100%');
                strengthText.text('Strong password');
            }
        });

        // Confirm Password Validation - EXACT SAME as register page
        $('#confirmPassword').on('input blur', function() {
            const password = $('#newPassword').val();
            const confirmPassword = $(this).val();
            const wrapper = $('#confirmPasswordWrapper');
            const errorMsg = $('#confirmPasswordError');
            
            if (confirmPassword.length === 0) {
                wrapper.removeClass('has-error has-success');
                $(this).removeClass('error success');
                errorMsg.hide();
            } else if (password === confirmPassword) {
                wrapper.removeClass('has-error').addClass('has-success');
                $(this).removeClass('error').addClass('success');
                errorMsg.hide();
            } else {
                wrapper.removeClass('has-success').addClass('has-error');
                $(this).removeClass('success').addClass('error');
                errorMsg.show();
            }
        });

        // Auto-dismiss alerts
        window.setTimeout(function() {
            $(".auth-alert-minimal").fadeOut(500, function(){
                $(this).remove(); 
            });
        }, 5000);
    </script>
}
